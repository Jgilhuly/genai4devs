
import os

#crewai-0.30.11
from crewai import Agent

from langchain_openai import ChatOpenAI as OpenAI
#from langchain_groq import ChatGroq

from dotenv import load_dotenv

from src.ai.tools.gv_rag_tools import GVRagTools

# Load env variables
load_dotenv()

"""
llm = ChatGroq(
            temperature=os.environ['LLM_MODEL_TEMP'], 
            groq_api_key = os.environ['GROQ_API_KEY'], 
            model_name=os.environ['GROQ_LLM_MODEL']
        )
"""


llm = OpenAI(
  model=os.environ['LLM_MODEL'],
  temperature=os.environ['LLM_MODEL_TEMP'], # Sets the creativity of the AI's responses. Lower values (closer to 0) make the AI more deterministic and less random.
  openai_api_key=os.environ['OPENAI_API_KEY'],
)

#GLOBALS

#Agent parameters
agent_verbose_mode=False # Enables detailed logging of the agent's execution for debugging or monitoring purposes when set to True. Default is False
max_iter_param=10 # The maximum number of iterations the agent can perform before being forced to give its best answer. Default is 15
max_rpm_param=20 # The maximum number of requests per minute the agent can perform to avoid rate limits. It's optional and can be left unspecified, with a default value of None
memory_param=True # Indicates whether the agent should have memory or not, with a default value of False. This impacts the agent's ability to remember past interactions. Default is False
allow_delegation_param=False # Agents can delegate tasks or questions to one another, ensuring that each task is handled by the most suitable agent. Default is True


#======================================================================================================================================================
#
## This class constructs Comparison crew agents with a specific role, goals, backstory, and a set of tools that it can use to perform relevant tasks.
##  The parameters like verbose, allow_delegation, memory, max_iter, and max_rpm are used to configure the agent's behavior.  Refer to Agent parameters
#
#======================================================================================================================================================
class WPComparisonCrewAgents():
  
  #-----------------------
  ## The comparison agent is designed to write a recommendation report justifying whether to switch the sell investment and buy the buy investments using the provided tools. 
  #-----------------------
  def investment_comparison_analyst(self):
    return Agent(
      role='Investment Comparison Analyst',
      goal=f"""
              You look through the written recommendation reports of the 2 investments and provide a high level comparison.
              Your comparison needs to compare the 2 investments in detail referencing relevant performance criteria.
            """,
      backstory="""
          You are an investment guru consulting to a Financial Advisory firm
          """,
      verbose=agent_verbose_mode,
      allow_delegation=allow_delegation_param,
      memory=memory_param,
      max_iter=max_iter_param,
      max_rpm=max_rpm_param,
      llm=llm,
      tools=[
        GVRagTools.comparison_tool,
      ]
    )
  
  #-------------------------
  ## The text_2_speech agent is designed to convert the comparison analyst recommendation document to speech using the provided tools. 
  ##  It gets its input from the from the Comparison Analyst agent recommendation document and then output an mp3 file
  #-------------------------  
  def text_2_speech(self):
    return Agent(
      role='Text to Speech',
      goal=f"""
                You convert the text file to speech. 
                You can use the tools you have to convert the text file to speech  
            """,
      backstory="""
          convert the text file to speech .
          """,
      verbose=agent_verbose_mode,
      allow_delegation=allow_delegation_param,
      memory=memory_param,
      max_iter=max_iter_param,
      max_rpm=max_rpm_param,
      llm=llm,
      tools=[
        GVRagTools.convert_txt_2_speech,
        ],     
    )
   
  #----------------------------------
  ## The email_with_attachment agent is designed to send email with the .mp3 generated by the text_2_speech agent using the provided tools. 
  ##  It gets its input from the text_2_speech Agent and then attaches the mp3 to the email
  #----------------------------------
  def email_with_attachment(self):
    return Agent(
      role='send email with the .mp3 generated by the text_2_speech agent',
      goal=f"""
              You will send an email including the .mp3 attachment generated by the text_2_speech agent. 
              You can use the tools you have to send an email with the .mp3 attachment. 
      """,
      backstory="""
          You get your input from the text_2_speech Agent and then attach this file to the email .
          """,
      verbose=agent_verbose_mode,
      allow_delegation=allow_delegation_param,
      memory=memory_param,
      max_iter=max_iter_param,
      max_rpm=max_rpm_param,
      llm=llm,
      tools=[
        GVRagTools.send_email_with_attachment2
        ],     
    )
